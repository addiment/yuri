{
	"$schema": "https://json.schemastore.org/tmlanguage.json",
	"scopeName": "source.yuri",
	"patterns": [
		{ "include": "#shader" },
		{ "include": "#comments" }
	],
	"repository": {
		"array": {
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.array.begin.json"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.array.end.json"
				}
			},
			"name": "meta.structure.array.json",
			"patterns": [
				{
					"include": "#value"
				},
				{
					"match": ",",
					"name": "punctuation.separator.array.json"
				},
				{
					"match": "[^\\s\\]]",
					"name": "invalid.illegal.expected-array-separator.json"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "##",
					"captures": { "0": { "name": "punctuation.definition.comment.yuri" } },
					"end": "##",
					"name": "comment.block.yuri"
				},
				{
					"captures": { "1": { "name": "punctuation.definition.comment.yuri" } },
					"match": "(#).*$\\n?",
					"name": "comment.line.number-sign.yuri"
				}
			]
		},
		"constant": {
			"match": "\\b(?:true|false|null)\\b",
			"name": "constant.language.json"
		},
		"number": {
			"match": "(?x)        # turn on extended mode\n  -?        # an optional minus\n  (?:\n    0       # a zero\n    |       # ...or...\n    [1-9]   # a 1-9 character\n    \\d*     # followed by zero or more digits\n  )\n  (?:\n    (?:\n      \\.    # a period\n      \\d+   # followed by one or more digits\n    )?\n    (?:\n      [eE]  # an e character\n      [+-]? # followed by an option +/-\n      \\d+   # followed by one or more digits\n    )?      # make exponent optional\n  )?        # make decimal portion optional",
			"name": "constant.numeric.json"
		},
		"complex": {
			"begin": "\\<\\|",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.complex.begin.yuri"
				}
			},
			"end": "\\|\\>",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.complex.end.yuri"
				}
			},
			"name": "meta.structure.complex.yuri"
		},
		"string": {
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.json"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.json"
				}
			},
			"name": "string.quoted.double.json",
			"patterns": [
				{
					"include": "#stringcontent"
				}
			]
		},
		"ident": {
			"match": "[_a-zA-Z][_a-zA-Z0-9]*",
			"name": "entity.name"
		},
		"stringcontent": {
			"patterns": [
				{
					"match": "(?x)                # turn on extended mode\n  \\\\                # a literal backslash\n  (?:               # ...followed by...\n    [\"\\\\/bfnrt]     # one of these characters\n    |               # ...or...\n    u               # a u\n    [0-9a-fA-F]{4}) # and four hex digits",
					"name": "constant.character.escape.json"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.unrecognized-string-escape.json"
				}
			]
		},
		"export": {
			"match": "export",
			"name": "storage.modifier.export.yuri"
		},
		"variable": {
			"patterns": [
				{ "include": "#export" },
				{
					"match": "let",
					"name": "storage.type.let.uri"
				},
				{ "match": ":" },
				{ "include": "#expression" }
			]
		},
		"function_arguments": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.bracket.round.java"
				}
			},
			"patterns": [
				{ "include": "#ident" },
				{
					"match": ":"
				},
				{
					"match": ","
				}
			],
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.bracket.round.java"
				}
			}
		},
		"function": {
			"match": "fn",
			"patterns": [
				{ "include": "#function_arguments" },
				{
					"include": "#ident",
					"name": "entity.name.function.yuri"
				}
			],
			"name": "storage.type.function.yuri"
		},
		"shader": {
			"patterns": [
				{ "include": "#variable" },
				{ "include": "#function" },
				{ "include": "#property" },
				{ "include": "#import" },
				{ "include": "#import" }
			]
		},
		"statement": {
			"begin": "",
			"patterns": [
				{ "include": "#expression" }
			],
			"end": ";"
		},
		"expression": {
			"patterns": [
				{ "include": "#constant" },
				{ "include": "#number" },
				{ "include": "#array" },
				{ "include": "#complex" }
			]
		}
	}
}